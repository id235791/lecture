Front-Controller 패턴

		/do/*
		*.do
	a.jsp -> web.xml -> Servlet(FrontController) -> c.jsp
				   if, switch
					↓↑
				Controller(Service - ~~~Action)
					↓↑
				      DAO,DTO
					↓↑
					DB

	개발자가 정의한 URI(~.us, /board/~, ...)를 페이지 요청 주소에
	작성하게 되면 web.xml에 가서 매핑되어 있는 서블릿을 찾는다.
	각 URL들(/user/join, /user/login, ...)을 전부 web.xml에
	하나씩 매핑해놓게 되면 web.xml의 코드가 길어지기 때문에 *.us, /user/* 형태로
	하나의 서블릿에 매핑을 해놓는다.(.us가 붙은 모든 요청은 하나의 경로로 보내주도록 한다)
	이러한 경로를 통해 가게 되는 서블릿 파일을 프론트 컨트롤러 라고 한다.
	(가장 먼저 모든 요청을 맞이하는 컨트롤러 라서 프론트 컨트롤러) 이 프론트 컨트롤러는
	.us 앞 혹은, /user/ 뒤에 붙은 요청명으로(login, join, ...) 어떤 로직을 수행할지
	판단하고 분기처리(if, switch)를 하게된다. 프론트 컨트롤러 안에서 모든 비즈니스 로직을
	구현해 놓게 되면 마찬가지로 코드가 길어지고 유지보수 및 재사용이 어렵기 때문에
	요청별로 따로 Controller(UserJoinOkAction, ...)를 만들어 놓는다.
	해당 Action 클래스 안에 execute() 메소드를 만들어서 그 내부에 비즈니스 로직을 구현하면
	프론트 컨트롤러 에서는 그 ~~Action 객체를 만든 후 execute() 메소드를 호출만 하면 된다.
	모든 ~~Action 클래스에 execute() 메소드를 구현해야 하기 때문에 Action 인터페이스를
	만들고 그 안에 추상메소드로 execute()를 선언해 놓으면 각 Action 클래스 마다
	그 인터페이스를 상속받아서 재정의를 할 수 있기 때문에 구현하기 편리하다.

	비즈니스 로직이 모두 완료되면 어떤 페이지로 이동을 할 것인지, 어떤 방식으로 이동할 것인지를
	정해서 FrontController로 리턴을 하고 이 때 리턴할 값이 두개이므로 그 둘을 담을
	객체로 만들어서 리턴을 한다. 이 객체의 타입이 Transfer 타입이다. Action 클래스들의
	execute()는 저 결과들, 즉 Transfer 타입의 객체를 리턴하고 그 리턴된 객체를
	FrontController에서 일괄적으로 받아서 해석한 후 알맞은 View와 방식으로 페이지 이동을 해준다.

	Model 2의 페이지 이동 방식
		JSP와 Servlet에서 페이지 이동을 처리할 때 두 가지 방식 중 하나를 사용한다.

		(시나리오 : a.jsp -> c.jsp)
		redirect(길 찾는 사람에게 가는 방법 알려주기)
			서버에게 c.do 요청 -> 서버는 "c.jsp로 갈 수 있는 방법"을 응답
			-> 응답받은 것을 이용해서 c.jsp로 가는 재요청 -> c.jsp 응답

			클라이언트가 요청했을 때 req, resp 객체는 초기화된다.
			시스템의 변화가 생기는 요청의 경우에는 redirect를 이용한다.
			insert, update, delete

		forward(길 찾는 사람 손 잡고 함께 가기)
			서버에게 c.do 요청 -> 서버는 처리 결과를 가지고 c.jsp로 전달
			-> 전달받은 곳에서 클라이언트에게 응답

			클라이언트에게 request 객체를 통해 값(데이터)을 넘겨주어야 할 때
			혹은 단순 조회를 요청했을 때 사용한다. redirect보다 성능이 좋다.
			select









