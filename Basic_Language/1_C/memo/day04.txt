포인터
	주소값을 담는 저장공간
	int data = 10;
	int* ptr = &data;//포인터변수

배열
	같은 자료형의 여러 변수를 나열해 놓은 것

	1. 여러 값들을 하나의 이름과 인덱스로 관리하기 위해서
	2. 규칙성이 없는 값들에 규칙성을 부여하기 위해서

배열의 선언
	자료형 배열명[길이] = { 값1,값2,값3,... };
	자료형 배열명[] = { 값1, 값2, 값3, .. };
	자료형 배열명[길이];

배열의 인덱스 번호
	실제 값들이 저장되어 있는 공간이 할당되면 이름은 존재하지 않고
	주소값만 존재한다. 따라서 시작 주소값을 배열명 변수가 갖고 있고,
	주소 연산을 통해 다음 주소값으로 이동한다. 시작 주소에서 이동한 횟수
	(연산된 정수)가 인덱스 번호이고 첫번째 방은 배열명이 갖고있는 주소에서
	0번 옮겨야 하므로 인덱스 번호는 0번부터 시작한다.
	
배열의 사용
	1. 배열명[idx] = 값;
	2. *(배열명+idx) = 값;

	3. 변수 = *(배열명+idx);
	4. 변수 = 배열명[idx];


	1. *(배열명+1)+4		//배열의 1번방 값에 + 4
	2. 배열명+2		//배열의 2번방의 주소값
	3. &배열명[3]		//배열의 3번방의 주소값
	4. *(&배열명[0]+1)	//배열의 1번방

배열의 크기
	sizeof(배열명)

배열의 길이
	sizeof(배열명)/sizeof(자료형)

문자열
	문자들이 들어있는 char 배열
	"Hello" ----> {'H','e','l','l','o','\0'};

널문자('\0')
	문자열의 끝을 알려주는 문자
	널문자가 있어야만 정상적으로 문자열을 사용할 수 있다.
	따라서 항상 문자열을 담을 배열의 크기는 실제 문자열 값보다
	한 칸 더 줘야 한다.


















