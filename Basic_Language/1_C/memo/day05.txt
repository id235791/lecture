문자열
	string.h

	strcpy_s(배열명,sizeof(배열명),"새로운값")
		문자열 복사
		앞에 써준 배열을 새로운 값으로 바꿔준다.
	strcmp("문자열1","문자열2")
		문자열 비교
		같으면 0, 다르다면 1 or -1
	strlen("문자열")
		문자열의 길이
		널문자는 제외한 실제 값의 길이

2차원 배열
	배열 안에 배열
	실제 값들이 있는 공간에 접근하려면 두번 접근을 거쳐야 한다.
	*(참조 연산자)이 2개이다. 그렇기 때문에 2차원 배열은
	값이 있는 공간까지 접근하기 위해서는 대괄호가 2개 필요하다.

2차원 배열의 선언
	
	자료형 배열명[행][열] = {
		{값1,값2,...},
		{값3,값4,...},
		...
	};
	자료형 배열명[행수][열수];

2차원 배열의 사용
	배열명[행][열] = 값;
	printf("??",배열명[행][열]);

	*(배열명+2)+1		2행1열의 주소값
	*(배열명[2]+3)		2행3열의 공간
	*(*(배열명+1)+4)		1행4열의 공간
	*(배열명+0)[1]		0행1열의 공간
	*((배열명+1)+1)		2행의 첫 주소값

2중 for문(nested for문)
	for문 안에 for문이 있는 형태
	바깥쪽에 있는 i for문은 다음 반복으로 넘어가기 위해서
	안쪽에 있는 수행할 문장들을 모두 마쳐야 한다.
	안에 있는 수행할 문장중에 j for문이 있으므로, 그 j for문이
	완전히 모두 완료되어야 i for문 입장에서는 수행할 문장을 모두
	마친것이 된다. 따라서 가장 안쪽에 있는 문장은
	(i for문의 반복횟수)*(j for문의 반복횟수) 만큼 수행된다.

	i	j
	0	0 1 2
	1	0 1 2

Storage Class(저장 기억 부류)
	변수의 종류

	지역변수 : 함수 내부에 선언된 변수
	전역변수 : 함수 외부에 선언된 변수
	정적변수 : static이 붙은 변수

	(Stack)			(Data)			(Heap)
	지역변수		전역변수		정적변수		주소값만 존재하는 공간

초기화	직접		자동		자동
보안성	상		하		중
생명주기	}		프로그램 종료	프로그램 종료	직접 해제
-----------------------------------------------------------------------------
함수
	이름 뒤에 소괄호
	단, 키워드 뒤에 소괄호는 함수가 아니다.
	반복되는 기능, 코드, 행위를 쉽게 관리하기 위해서 사용한다.

	f	(x)	=	2x+1
	함수	매개		리턴값
	이름	변수

함수의 구조
	①리턴타입 ②함수명(③자료형 매개변수1,자료형 매개변수2, ...){
		④호출시 실행할 문장;
		⑤return 리턴값;
	}

	① return 뒤에 값의 타입에 맞는 자료형을 작성해준다.
	리턴값이 없을 때에는 void로 작성한다.
	② 동사형으로 작성한다.( eat("마라샹궈") eat("초밥") eat("육회") )
	③ 생략 가능하다. 하지만 생략시에는 외부(사용하는 곳)에서 값을 전달받을 수 없고,
	여러 값을 전달받아야 할 때에는 , 로 구분하여 값의 개수만큼 선언해 준다.
	사용시에는 매개변수의 타입과 개수에 맞게 순서대로 값을 전달해 주어야 한다.
	④ 생략 가능하다.
	⑤ 생략 가능하다.

함수 선언 순서
	두 정수의 덧셈 함수

	1. 함수의 이름을 생각한다.
		void add(){

		}
	2. 매개변수를 생각한다.
		void add(int num1, int num2){

		}
	3. 실행할 문장을 생각한다.
		void add(int num1, int num2){
			printf("두 정수의 덧셈 함수입니다\n");
			int result = num1+num2;
		}
	4. 리턴값을 생각한다.
		void add(int num1, int num2){
			printf("두 정수의 덧셈 함수입니다\n");
			int result = num1+num2;
			return result;
		}
	5. 리턴타입을 수정한다.
		int add(int num1, int num2){
			printf("두 정수의 덧셈 함수입니다\n");
			int result = num1+num2;
			return result;
		}

함수의 사용
	함수명(값1,값2,..);	//매개변수가 있을 경우
	함수명();			//매개변수가 없을 경우

	함수 사용부분은 선언부에 return값이 있다면 사용한 부분 통째로를
	그 리턴값으로 봐야 한다. 하지만, return값이 없다면 절대 값으로
	봐서는 안된다.

리턴을 사용해야 할 때
	함수 내부에 모든 기능이 구현되지 않을 때
	사용하는 부분에서 아직 할 작업이 남았을 때
	함수 기능의 결과를 사용하는 부분에 알려주어야 할 때

리턴을 사용하지 않아도 될 때
	함수 내부에서 출력까지 모든 기능이 다 구현될 때

함수를 사용하는 이유
	1. 반복되는 기능, 코드를 쉽게 관리하기 위해 사용
		재사용의 목적(특정성을 부여해서는 안된다.)

	2. 소스코드 간결화를 위해 사용











