기타 제어
	break
	continue: 다음 반복으로 넘어가기(아래쪽에 있는 문장은 스킵)
		아래쪽에 건너뛸만한 의미있는 문장이 있을 때 사용

컬렉션(collection)
	여러 데이터들이 모여있는 형태

	list
	tuple
	set
	dict

list
	대괄호 [] 가 있으면 list다
	여러 값들을 하나의 이름으로 저장하여 관리할 수 있다.

	1. 비슷한 의미의 값을 담는 저장공간이 여러개 선언될 때 list를 사용한다.
	2. 규칙성이 없는 값에 규칙성을 부여하고자 할 때 list를 사용한다.
		["꽃", "정다솔", "파이썬", "0001", "apple"]

list 선언
	list명 = [값1,값2,...]
	list명 = list()

list 사용하기
	list명[방번호(index)]

	arData[0] = 10		#저장공간
	print(arData[0])	#값

list에 요소 추가하기
	list명.append(값)	: list의 맨 뒤에 값이 추가된다.
	list명.insert(index,값)	: index위치에 값이 추가된다.
	
list의 요소 수정하기
	list명[index] = 새로운 값

list의 요소 삭제하기
	list명.remove(값)	: 해당 리스트에서 그 값을 삭제
	list명.pop()		: 해당 리스트의 가장 마지막값을 삭제
				값을 삭제하면서 돌려줌
	del list명[index]	: 해당 인덱스의 방을 삭제

list의 길이
	len(list명)

리스트의 특징
	리스트는 하나의 이름으로 여러 값들을 관리해야 한다.
	이름이 하나라는 뜻은 공간도 한개라는 뜻이다.
	공간 한개에는 여러 값들을 담을 수 없기 때문에
	실제 값들은 이름이 없는 곳에 나열된 채 생성된다.
	그 나열된 공간의 가장 첫번째 주소를 기억한다면
	나머지 공간들은 한번씩 이동함으로써 접근이 가능하다.
	따라서 리스트명 변수는 나열된 공간의 첫번째 주소값을
	기억하게 되고 그 주소로 이동한 후 몇번 더 움직이는지가
	인덱스 번호가 된다. 그러므로 인덱스 번호는 0번부터 시작한다.

	리스트명[인덱스] : 리스트명이 가지고 있는 주소로 가서 인덱스만큼 추가 이동한 공간

2중 for문(nested for문)
	for문 안에 for문이 있는 형태
	바깥쪽에 있는 i for문은 다음 반복으로 넘어가기 위해서
	안쪽에 있는 수행할 문장들을 모두 마쳐야 한다.
	안에 있는 수행할 문장중에 j for문이 있으므로,
	그 j for문이 모두 완료되어야 i for문 입장에서는
	모든 수행할 문장을 마친것이 된다. 따라서 가장 안쪽에 있는 문장은
	(i for문 반복횟수)*(j for문 반복횟수) 만큼 수행된다.

	i	j
	0	0 1 2
	1	0 1 2














