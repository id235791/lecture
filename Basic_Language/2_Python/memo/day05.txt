tuple(튜플)
	소괄호가 있으면 tuple이다.
	요소의 수정, 삭제가 불가능하다.

tuple 선언
	튜플명 = (값1,값2,...)
	튜플명 = 값1,값2,...
	튜플명 = tuple()

set(셋)
	set은 집합이다.
	set은 원소들의 순서가 고정되어 있지 않다.(인덱스가 없다)
	set은 중복되는 원소를 담을 수 없다.

set 선언
	셋명 = {값1,값2,...}
	셋명 = set()

교집합
	셋1 & 셋2
합집합
	셋1 | 셋2
차집합
	셋1 - 셋2

set에서 요소 가져오기
	1. 형변환(list,tuple)
	2. 바뀐 컬렉션에서 index로 가져오기

딕셔너리(dict)
	키(Key)와 밸류(Value)가 한 쌍으로 저장된다.
	Key값은 중복이 불가능하다.

딕셔너리 선언
	dict명={키1:값1,키2:값2,...}
	dict명 = dict()

	dict명.keys()	: Key값들만 모여있는 새로운 컬렉션
	dict명.values()	: Value값들만 모여있는 새로운 컬렉션
	dict명.items()	: (Key,Value) 튜플들이 담겨있는 새로운 컬렉션

빠른 for문(향상된 for문, forEach문)

	for 변수 in 컬렉션:
		컬렉션 안에 있는 요소들을 하나씩 변수가 가져오면서 반복

	단순한 전체순회를 할 경우에는 아주 편하게 사용 가능하지만
	어떤 요소가 몇번째에 있는지, 혹은 순서가 중요한 경우에는
	기존의 for문을 이용한다.
----------------------------------------------------------------
함수, 메소드
	이름 뒤에 소괄호
	반복되는 코드, 행위, 기능들을 쉽게 관리하기 위해 선언하여 사용한다.

	f	(x) = 	2x+1
	함수이름	매개변수	리턴값

함수 선언
	def ①함수명(②매개변수1, 매개변수2, ...):
		③실행할 문장
		④return 리턴값

	① 동사형으로 작성한다. ( eat("피자") eat("떡볶이") )
	② 생략 가능하다. 하지만 생략시에는 외부(사용하는 곳)에서 값을
	전달받을 수 없고, 여러 값들을 전달받아야 할 때에는 , 로 구분하여
	값의 개수만큼 선언해 준다. 사용시에는 선언된 매개변수의 개수만큼
	맞춰서 값을 전달해준다.
	③ 생략 가능하다.
	④ 생략 가능하다.

함수의 선언 순서
	두 정수의 덧셈 함수

	1. 함수명을 생각한다.
		def add():

	2. 매개변수를 생각한다.
		def add(num1,num2):

	3. 실행할 문장을 생각한다.
		def add(num1,num2):
			print("두 정수의 덧셈함수")
			result = num1 + num2
	4. 리턴값을 생각한다.
		def add(num1,num2):
			print("두 정수의 덧셈함수")
			result = num1 + num2
			return result

함수 주의사항
	함수 선언구역 내부에 함수를 선언하지 않는다.
	매개변수가 없다면 외부에서 값을 전달받을 수 없다.
	리턴값이 있다면 사용하는 부분을 통째로 그 리턴값으로 봐야한다.
	리턴값이 없다면 사용하는 부분을 절대 값으로 봐서는 안된다.

함수 사용
	선언부에 선언된 매개변수의 개수만큼 값을 넘겨주면서 사용한다.

	함수명(값1,값2,..)	#매개변수가 있는 경우
	함수명()		#매개변수가 없는 경우

함수의 사용 이유
	1. 반복되는 기능, 코드들을 쉽게 관리하기 위해서
		재사용의 목적(내부에서 특정성을 부여해서는 안된다.)
	2. 소스코드 간결화(모듈화 -> 분업)

리턴을 사용할 때
	함수 내에서 모든 작업이 완료되지 않을 때
	사용하는 부분에서 할 작업이 더 남았을 때
	사용하는 부분에 함수 내의 작업결과를 알려주어야 할 때

리턴을 사용하지 않을 때
	함수 내에서 출력까지 모든 작업이 완료될 때













