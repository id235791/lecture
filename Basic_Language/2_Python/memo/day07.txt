생성자 선언
	선언시에는 어떤 클래스던 간에 똑같은 이름을 이용한다.
	class Car:
		#Car클래스의 생성자
		def __init__(self):

	class User:
		#User클래스의 생성자
		def __init__(self):

	----문법----
	def __init__(self,변수1,변수2,...):
		self.변수1 = 변수1
		self.변수2 = 변수2
		...

	생성자를 호출하게 되면 넘겨주는 매개값들은 매개변수의 변수1, 변수2, ...이 받고
	함께 날라온 객체가 담겨있는 self를 이용해서 self.변수1, self.변수2, ...에
	그 값들을 넣어줌으로써 필드를 세팅해줄 수 있다.

생성자의 목적
	1. 객체 생성
	2. 필드 초기화
		
상속(inheritance)
	1. 기존에 사용중인 클래스의 필드가 새롭게 만드는 클래스와 공통요소가 많다면
	재구현 하지 않고 상속을 받아서 사용한다.

	2. 
	
class A:
	A의 필드

class B(A):
	B의 필드

	b = B()
	실제로 b 객체는 A의 필드 + B의 필드 둘 다 가지고 있다.

A : 부모 클래스, 슈퍼 클래스, 상위 클래스, 기반 클래스
B : 자식 클래스, 서브 클래스, 하위 클래스, 파생 클래스

자식 타입으로 객체 생성시 일어나는 일
	자식 객체는 자식 생성자를 호출하여 객체화를 진행한다.
	메모리에 자식 필드만 올라갔다면 자식 객체로 절대 부모 필드에
	존재하는 것들에 접근할 수 없다. 따라서 자식 생성자를 호출하게
	되면 부모의 생성자가 먼저 자동으로 호출되고 그 때 부모의 필드가
	메모리에 먼저 올라가게 된다. 그 이후에 자식의 필드도 따라서
	붙게 되고 그 결과 자식 객체는 부모 필드에도 접근할 수 있게된다.
















