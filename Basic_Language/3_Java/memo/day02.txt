형변환
	자동 형변환
		정수 + 실수 = 실수
		3 + 0.0 = 3.0

		문자 + 정수 = 정수
		'A' + 0 = 65

		정수, 실수, 문자 + 문자열 = 문자열
		10 + "" = "10"

	강제 형변환
		(자료형) : 형변환연산자

		(자료형)값
		(double)10

연산자
	다양한 기능이 있는 특수문자 또는 단어
	예약어는 연산자라 부르지 않음

우선순위
	한 문장 안에 여러 연산자가 있을 때 먼저 연산하는 순위

	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자

결합성
	한 문장 안에 우선순위가 같은 연산자가 있을 때
	알맞는 방향으로 결합되어 연산되는 성질

	(1+2)+3+4
	(3+3)+4
	6+4
	10

산술 연산자
	a%b	: a를 b로 나눈 나머지
	2%3 --> 2

비트 연산
	17 : 10001
	14 : 01110

	논리곱(AND-&)	: 두 비트가 모두 1일 때 1
		17&14 --> 10001&01110 --> 00000 --> 0
	논리합(OR-|)	: 둘 중 하나라도 1이면 1
		17|14 --> 10001|01110 --> 11111 --> 31
	배타논리합(XOR-^)	: 두 비트가 서로 다르면 1
		17^14 --> 10001^01110 --> 11111 --> 31
	논리부정(NOT-~)	: 0을 1로, 1은 0으로 비트를 뒤집어준다. (부호 비트도 뒤집힌다)
		~14 --> ~[0]01110 -> [1]10001 -> -15
		~a = -(a+1)

쉬프트 연산자
	a << b	좌쉬프트 : a를 b만큼 좌측으로 비트 이동
		14<<1 --> 01110 << 1 --> 11100 --> 28

	a >> b	우쉬프트 : a를 b만큼 우측으로 비트 이동
		14>>1 --> 01110 >> 1 --> 00111 --> 7

조건식
	결과가 참 또는 거짓, 둘 중 하나로 나오는 식
	조건을 제시하는 식
	상태를 물어보는 식
	주장하는 식
	조건식에는 관계 연산자가 사용이 된다.

	자바에서는 0과 1 대신 false, true 라는 값을 사용한다.

	논리형	boolean		1byte	true,false
	boolean a = true;
	boolean b = 10>5;

관계 연산자
	>, <	: 초과, 미만
	>=, <=	: 이상, 이하
	==	: 같다
	!=	: 다르다

논리 연산자
	조건식들의 관계를 설정해주는 연산자
	A, B는 조건식으로 가정한다.

	A || B	: 두 조건식의 결과 중 하나라도 true면 true
	A && B	: 두 조건식의 결과가 둘 다 true 이면 true

단항 연산자
	!A :	A 조건식의 연산 결과를 거꾸로 뒤집어주는 연산자
		boolean타입의 값을 반대로 뒤집어주는 연산자
		!true -> false

삼항 연산자
	(조건식)?(참이면 오는 부분):(거짓이면 오는 부분)
	(조건식)?(참일때의 값):(거짓일때의 값)

	삼항 연산자는 사용부분 통째로 값
	조건식의 결과값인 true, false를 우리가 원하는 특정 값으로 변환할 때 사용
	결과가 두 가지의 값으로 나올 때 사용하는 것이 좋다.

최우선 연산자
	() .
단항 연산자
	~ ! 형변환연산자

이항 연산자
	산술 연산자
		+ - * / %
	쉬프트 연산자
		>> <<
	관계 연산자
		> < >= <= == !=
	논리 연산자
		&& ||
삼항 연산자
	? :
대입 연산자
	=

제어문
	위에서 아래로만 흐르던 코드의 흐름을 제어하기 위해 사용하는 문장

	조건문(선택제어문)
		if ~ else if ~ else
		switch ~ case ~ default

	반복문(반복제어문)
		while
		for

조건문
	조건에 따른 경우의 수를 나누기
	흐름 나누기
	선택지를 주기
	특정한 상태를 물어보기

if문
	if(조건식1){
		조건식1이 참일 때 실행
	}
	else if(조건식2){
		조건식2가 참일 때 실행
	}
	...
	else{
		위의 조건식들이 모두 거짓일 때 실행
	}
	
switch문
	경우의 수가 변수의 값 등가 비교로 인해 나뉘는 경우 사용
	switch문 뒤에 작성한 변수에 값에 따라 알맞은 case로 이동하고 문장을 실행한다.
	하지만 그 밑에 case가 더 있다면 그 안에 있는 문장들도 실행된다.
	따라서 각 케이스들을 나누어 주려면 알맞게 break; 를 사용해야 한다.
	
	switch(변수){
	case 값1:
		변수에 담긴 값이 값1 이면 실행
		break;
	case 값2:
		변수에 담긴 값이 값2 이면 실행
		break;
	...
	default:
		변수에 담긴 값이 위의 값들이 아닐 때 실행
	}

기타 제어
	break	: 속해있는 switch문이나 반복문을 탈출한다.
	continue

누적 대입 연산자(복합 대입 연산자, 누적 연산자)
	+= -= /= *= %=

	int data = 10;
	data = data+5;
	data += 5;

	data = data - 5; --> data-=5;
	data = 5 - data; --> X

	data = "A";
	data = data+"B"; --> "AB"
	data += "B"; (O)

	data = "A";
	data = "B"+data; --> "BA"
	data += "B"; (X)

증감 연산자
	++, --
	data += 1; --> data++;
	data -= 1; --> data--;

	전위형
		사용하는 부분부터 바로 적용
		int data = 10;
		syso(++data);	11
		syso(data);	11

	후위형
		다음 사용부분부터 적용
		int data = 10;
		syso(data++);	10
		syso(data);	11

반복문
	특정한 코드나 행위를 반복해야 할 때 사용

	조건에 의한 반복문
		while, do~while
	횟수에 의한 반복문
		for

while문
	while(반복조건식){
		반복조건식이 참일 동안 반복 실행할 문장
	}

do ~ while문
	while문과 동일하지만 무조건 한 번은 실행한다.
	do{
		반복조건식이 참일 동안 반복 실행할 문장
	}while(반복조건식);

무한반복
	while(true){
		무한정으로 반복하여 실행할 문장
	}
	while문 뒤의 () 안에는 조건식, 즉 boolean 타입의 값이 와야 한다.
	따라서 그 안에 true라는 값을 넣을 수가 있고, 그 값은 상수로 작성했기
	때문에 절대 변하지 않는다. 따라서 그 while문은 무한반복하게 된다.
	안에서 특정한 조건일 때 if문 안의 break를 이용한 탈출구 하나 이상을
	만들어 주어야 한다.

for 문
	횟수에 의한 반복문
	반복 횟수가 특정된 경우에 사용한다.
	반복때마다 무언가 값이 일정하게 변하는 경우에 사용한다.

	for(초기식;조건식;증감식){
		실행할 문장
	}

	초기식 : 반복문에 들어갈 때 딱 한번만 수행된다. (변수 하나를 선언해준다)
	조건식 : 매 반복 전에 검사할 조건식을 작성한다. (변수를 이용한 조건식 설정 / 참이면 반복,
						거짓이면 탈출)
	증감식 : 매 반복 끝에 수행할 문장을 작성한다. (초기식에서 선언한 변수의 증감을 설정)







