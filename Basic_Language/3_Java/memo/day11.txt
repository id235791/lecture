Thread(쓰레드)

프로세스
	실행된 프로그램
	운영체제로부터 시스템 자원을 할당받는 작업의 단위
	자바 프로그램은 운영체제 대신에 JVM에 의해서 자원을 할당받는다.

쓰레드
	프로세스의 특정한 수행 경로
	프로그램의 처리 경로
	프로그램의 흐름

멀티 쓰레드
	하나의 프로세스를 동시에 처리하는 것처럼 보이지만
	사실은 매우 짧은 단위로 분할해서 차례대로 처리한다.
	여러개의 처리 경로를 가질 수 있다.
	한 개의 처리 경로를 여러개로 나누어 동시 작업이 가능해진다.
	웹 서버 프로그램(JSP)이 대표적인 멀티 쓰레드 응용 프로그램이다.

장점
	효율성 증가
	처리량 증가
	처리비용 감소

단점
	복잡하고 설계가 어려움
	자원의 공유문제
	교착상태(deadlock)

교착상태
	멀티 쓰레드 중 쓰레드간의 대기 상태가 종료되지 않아서
	무한정 대기만 하는 비정상적인 상태
	해결방법 : 조건문을 통해 교착상태를 판단하고 다시 깨워준다.

쓰레드 생성
	1. Thread 클래스 상속
	2. Runnable 인터페이스 상속 후 Thread 객체에 넘겨주기

동기화(sychronized)
	하나의 쓰레드가 작업 중일때 다른 쓰레드가
	동시에 같은 필드를 사용하지 못하도록 막는 것

파일 입출력
	Writer(쓰기)
		FileWriter > BufferedWriter > 파일에 쓰기

		FileWriter : 경로에 있는 파일을 가져오기(쓰기 위해)
		*파일이 없는 경우에는 그 이름대로 파일을 생성해준다.
		*하지만 경로가 이상한 경우(폴더가 잘못된 폴더인 경우)에는
		폴더를 생성해 주지는 않고, 예외를 발생시킨다.

		new FileWriter("파일경로")		: 덮어쓰기 모드
		new FileWriter("파일경로",true)	: 이어쓰기 모드

		BufferedWriter : 버퍼를 이용해서 파일 작성

		bw.write("문자열")	: 버퍼에 문자열 쓰기
		bw.close()		: 실제 파일에 적용

	Reader(읽기)
		FileReader > BufferedReader > 파일에서 읽기

		FileReader : 경로에 있는 파일 가져오기(읽기 위해)
		*파일이 존재하지 않으면 예외 발생(FNFE)

		BufferedReader : 버퍼를 이용해서 파일 읽기

		br.readLine()	: 파일에 있는 내용을 한 줄 이동하며 읽어오기

소켓 통신
	클라이언트(사용자)와 서버(백엔드 API)가 특정한 port를 통해 하는 통신
	실시간으로 이루어지며 양방향 통신에 해당함
	실시간 채팅, 스트리밍 등이 소켓 통신을 사용하는 대표적인 기술

	1. 클라이언트가 서버의 주소로 특정 port번호를 사용해서 연결 요청 - (악수/Handshake)
	2. 요청을 받은 서버는 연결을 허용하며 클라이언트의 소켓과 연결
	3. 실시간으로 통신 가능한 네트워크 통로가 열렸으니 언제든 통신 가능
		- 서로간의 실시간 통신이 가능하도록 계속해서 요청을 듣고(listen)있는 상태
		- 통신의 특성상 서로 대규모의 데이터는 전송하지 않고 작은 데이터 위주로 통신
		- 양쪽에서 약속해놓은 형태의 데이터를 서로 보내고, 그 데이터를 해석 후 사용














