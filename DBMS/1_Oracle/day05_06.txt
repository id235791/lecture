함수
	이름 뒤에 소괄호()
	f(x), COUNT()

	단일행 함수
		문자함수
		null처리 함수
		숫자함수
		형변환 함수

	그룹함수
		여러 데이터들을 받아서 하나의 결과로 도출해주는 함수

OPTIMIZER

	COST		: 예상 수행 시간.
			  쿼리를 수행하는데 소요되는 일량 또는 시간.
	CARDINALITY	: 실행결과의 건수.

SQL을 가장 빠르고 효율적으로 수행할 최적의 처리경로(최저비용)를
생성해주는 DBMS 내부의 핵심 엔진.
사용자가 쿼리문(SQL)으로 결과를 요구하면,
이를 생성하는데 필요한 처리경로는 DBMS에 내장된 옵티마이저가
자동으로 생성한다.
옵티마이저가 생성한 SQL처리경로를 실행 계획(Execution Plan)이라고 부른다

옵티마이저의 SQL 최적화 과정
	사용자가 작성한 쿼리수행을 위해, 실행될만한 실행계획을 찾는다.
	데이터 딕셔너리(Data Dictionary)에 미리 수집해 놓은
	오브젝트 통계 및 시스템 통계 정보를 이용해 각 실행계획의
	예상비용을 산정한다.
	각 실행계획을 비교해서 최저비용을 갖는 하나를 선택하고 실행.

OPTIMIZER 종류
	1. 규칙기반 옵티마이저(RBO), 휴리스틱(Heuristic) 옵티마이저
		미리 정해진 규칙에 따라 실행
		Oracle 10g버전부터 RBO에 대한 지원 중단

	2. 비용기반 옵티마이저(CBO)
		비용이 가장 낮은 실행계획을 선택

PARSER		OPTIMIZER	ROW_SOURCE	SQL_ENGINE
				GENERATOR
문법오류검사,	총 비용 계산	실행가능 코드로 	실행
코드로 변경	실행계획 생성	변경

그룹함수(집계함수)
	해당하는 모든 데이터들을 모아 하나의 결과를 도출해주는 함수
	WHERE절에서 사용할 수 없고, null값은 포함하지 않는다.

	AVG()	: 평균
	MAX()	: 최대값
	MIN()	: 최소값
	SUM()	: 합계
	COUNT()	: 갯수

ORDER BY
	쿼리의 결과들을 정렬하기 위한 문법
	ORDER BY 컬럼명 오름(내림)차순
	ex) ORDER BY HEIGHT ASC(DESC) : 키를 기준으로 오름(내림)차순 정렬
	
GROUP BY
	그룹함수를 특정 그룹별로 나눌 때 사용하는 문법, ~별 X
	ex) 포지션 별 평균급여

	SELECT 그룹함수 FROM 테이블 GROUP BY 컬럼명
	SELECT AVG(PAY) FROM PLAYER GROUP BY "POSITION"

HAVING
	그룹핑에 대한 조건을 부여할때는 HAVING절을 사용한다
	어떤 조건이 모든 그룹에 적용되는 공통조건인 경우에는 WHERE절에 부여해 주는것이 좋다

SELECT문 구조
	SELECT * FROM 테이블명 WHERE 조건절
	GROUP BY 컬럼 HAVING 조건절 ORDER BY 컬럼

실행 순서
	FROM -> WHERE -> GROUP BY -> HAVING -> SELECT
	-> ORDER BY

	WHERE 조건에서 가능한 많은 값을 줄어주면 속도가 빠르다.
======================================================================
JOIN
	여러 테이블에 흩어져 있는 정보 중
	사용자가 필요한 정보만 가져와서 가상의
	테이블처럼 만들고(카티션 곱) 결과를 보여주는 것

	조회 테이블이 너무 많이 쪼개져 있으면
	느리기 때문에 입력, 수정, 삭제의 성능을
	향상시키기 위해서 사용

	
-내부 조인(INNER JOIN) : INNER 생략 가능
	조건이 일치하는 값이 두 테이블에 모두 존재할 때 조회

테이블명 INNER JOIN 테이블명
ON 조건식

테이블명 JOIN 테이블명
ON 조건식

등가조인		: ON절에 등호가 있을 때
비등가조인		: ON절에 등호가 없을 때

ON절의 조건은 JOIN이 되면서 실행되고
WHERE절의 조건은 JOIN이 모두 끝나고 실행된다.

ON과 WHERE를 같이 사용할 때와
ON만 사용할 때의 결과가 같다면 ON만 사용하는 것이 좋다.

네츄럴 조인(NATURAL JOIN)

	USING : 중복되는 컬럼이 생길 시 맨 앞으로 출력하며
		중복 컬럼을 한 개만 출력한다.
		컬럼 이름과 타입이 모두 같아야 한다.
	USING(중복 컬럼명)

-외부 조인(OUTER JOIN)
	두 개의 테이블 중 조건이 거짓이라도
	한 개의 테이블의 모든 정보가 검색되어야 할 때 사용한다.

-LEFT OUTER JOIN
-RIGHT OUTER JOIN
-FULL OUTER JOIN

조인 수행 원리

1. Nested Loop Join(가장 기본적인 Join 기법)
	먼저 읽은 테이블의 행의 수만큼 Join 수행
	Driving Table(선행 테이블)이 Join의 성능을 결정한다.
	Diven Table(후행 테이블)은	 나중에 읽는 테이블을 의미한다.

2. Sort-Merge join
	검색과 조건 비교 전 where조건을 기준으로 정렬합니다.
	정렬할 때 시간이 너무 오래 걸리지만 인덱스가 존재하지 않을 때에
	빨리 해당 데이터를 찾아서 결과를 출력할 수 있다.

3.Hash Join
	인덱스가 있기 때문에 Sort-Merge join보다 2배 이상의 빠른 속도로
	검색이 가능하다.