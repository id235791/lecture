--PLAYER 테이블에서 생일이 NULL인 선수들은 정준 선수의 생일로 바꾸기
UPDATE PLAYER SET BIRTH_DATE=
	(SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME='정준')
WHERE BIRTH_DATE IS NULL;
--EMPLOYEES 테이블에서 Den의 전화번호와 앞 3자리가 같은 사원들 검색
SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES WHERE PHONE_NUMBER LIKE
	(SELECT SUBSTR(PHONE_NUMBER,1,3) FROM EMPLOYEES WHERE FIRST_NAME='Den')||'%';

--PLAYER 테이블에서 왕선재 선수와 생일이 같은 선수들 검색하기 팀 아이디로 정렬하기
SELECT * FROM PLAYER WHERE BIRTH_DATE=
	(SELECT BIRTH_DATE FROM PLAYER WHERE PLAYER_NAME='왕선재')
AND PLAYER_NAME!='왕선재';

--STADIUM 테이블에서 경기장 이름과 홈팀명, 좌석수, 모든 경기장들의 평균 좌석수 검색
SELECT * FROM STADIUM;
SELECT * FROM TEAM;
SELECT s.STADIUM_NAME, t.TEAM_NAME,s.SEAT_COUNT,
	(SELECT ROUND(AVG(SEAT_COUNT)) FROM STADIUM) "평균좌석수"
FROM STADIUM s
	LEFT OUTER JOIN TEAM t ON s.HOMETEAM_ID=t.TEAM_ID;
--T_PROFESSOR 테이블에서 김영조 교수와, 김영조 교수보다 입사일이 늦지만 급여가 높은 교수들의
--PROFNO, NAME, PAY 검색
SELECT PROFNO, NAME, PAY FROM T_PROFESSOR WHERE PAY>=
	(SELECT PAY FROM T_PROFESSOR WHERE NAME='김영조') AND HIREDATE>=
	(SELECT HIREDATE FROM T_PROFESSOR WHERE NAME='김영조');

CREATE TABLE TEST(
	testcol1 NUMBER(3),
	testcol2 VARCHAR2(20)
);
CREATE TABLE TEST2(
	testcol1 NUMBER(3),
	testcol2 VARCHAR2(20)
);
INSERT INTO TEST VALUES(1,'A');
INSERT INTO TEST VALUES(2,'B');
INSERT INTO TEST VALUES(3,'C');
INSERT INTO TEST VALUES(4,'D');
INSERT INTO TEST VALUES(5,'E');
INSERT INTO TEST (SELECT 6,'F' FROM DUAL);
CREATE TABLE TEST3 AS(SELECT * FROM TEST);
SELECT * FROM TEST3;
--TEST2에다가 TEST, TEST3 내용 한번에 추가하기
INSERT INTO TEST2 (SELECT * FROM TEST UNION ALL SELECT * FROM TEST3);
SELECT * FROM player WHERE TEAM_ID='K04';
SELECT * FROM team;

--PLAYER테이블에서 팀별 최대 몸무게인 선수의 팀명, 지역명, 선수이름, 몸무게 검색
--WHERE (TEAM_ID,WEIGHT) IN ('팀명',최대몸무게)
SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER GROUP BY TEAM_ID;

SELECT t.TEAM_NAME,t.REGION_NAME, p.PLAYER_NAME, p.WEIGHT FROM PLAYER p
	JOIN TEAM t ON t.TEAM_ID=p.TEAM_ID
WHERE (p.TEAM_ID,p.WEIGHT) IN
	(SELECT TEAM_ID, MAX(WEIGHT) FROM PLAYER GROUP BY TEAM_ID);


--DEPT 테이블의 LOC별 총급여, 평균급여, 전체 사원의 평균급여
SELECT *  FROM EMP;
SELECT d.LOC "지역", sum(e.SAL) "총급여",ROUND(AVG(e.SAL)) "평균급여",
	(SELECT ROUND(AVG(SAL)) FROM EMP) "전체 사원 평균급여"
FROM EMP e JOIN DEPT d ON e.DEPTNO=d.DEPTNO
GROUP BY d.LOC;
--			TO_CHAR(HIREDATE,'YYYY')
SELECT TO_CHAR(HIREDATE,'YYYYMMDD') FROM EMP WHERE ENAME='FORD';
--EMP 테이블에서 FORD의 입사년도와 같은 사원 전체 정보 검색
SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'YYYYMMDD') LIKE
	(SELECT SUBSTR(TO_CHAR(HIREDATE,'YYYYMMDD'),1,4)||'%'
FROM EMP WHERE ENAME='FORD');

--ALL, ANY
SELECT * FROM EMP WHERE SAL>=ANY(SELECT SAL FROM EMP);
SELECT * FROM EMP WHERE SAL>=(SELECT MIN(SAL) FROM EMP);

SELECT * FROM EMP WHERE SAL>=ALL(SELECT SAL FROM EMP);
SELECT * FROM EMP WHERE SAL>=(SELECT MAX(SAL) FROM EMP);

--컬럼<>ANY() : 모든것
--컬럼<>ALL() : 같지않은것

--EXISTS(서브쿼리)
--뒤의 서브쿼리의 결과가 있기만 한다면 참
SELECT * FROM emp;
SELECT * FROM dept;
SELECT d.DNAME FROM DEPT d,EMP e WHERE d.DEPTNO=e.DEPTNO;
SELECT d.DNAME FROM DEPT d WHERE EXISTS
	(SELECT 1 FROM EMP e WHERE e.DEPTNO=d.DEPTNO);

(SELECT SAL FROM EMP WHERE DEPTNO=20);
(SELECT 1 FROM EMP WHERE DEPTNO=20);

SELECT * FROM EMP WHERE SAL IN (SELECT SAL FROM EMP WHERE DEPTNO=20);
SELECT SAL FROM EMP WHERE DEPTNO=20;
SELECT * FROM EMP WHERE EXISTS (SELECT 1 FROM EMP WHERE DEPTNO=20);
SELECT * FROM emp;

--t_emp2에서 과장 직급의 최소 연봉자보다 급여를 많이 받는 직원의 이름, 직급, 급여 검색
SELECT NAME, POST, TO_CHAR(PAY,'999,999,999') FROM T_EMP2 WHERE PAY>ANY(SELECT PAY FROM T_EMP2 WHERE POST='과장');
--t_student 테이블1에서 4학년의 최소 몸무게보다 몸무게가 덜 나가는 학생의 이름, 학년, 몸무게 검색
SELECT NAME,GRADE,WEIGHT FROM T_STUDENT
WHERE WEIGHT<ALL(SELECT WEIGHT FROM T_STUDENT WHERE GRADE=4);

CREATE TABLE TEST_A(
	TESTCOL1 NUMBER(3),
	TESTCOL2 VARCHAR2(20)
);

INSERT ALL
	INTO TEST VALUES(10,'ASDF')
	INTO TEST VALUES(20,'QWER')
	INTO TEST2 VALUES(10,'ASDF')
	INTO TEST2 VALUES(20,'QWER')
SELECT * FROM DUAL;

--자신의 직급의 평균급여보다 같거나 많이 받는 직원의 이름, 직급, 급여 검색
SELECT t1.NAME,t1.POST,t1.PAY FROM T_EMP2 t1 WHERE t1.PAY>=
	(SELECT AVG(PAY) FROM T_EMP2 t2 WHERE t1.post=t2.post);

--학과별 입사일이 가장 오래된 교수의 교수번호, 이름, 학과명 검색
SELECT * FROM T_DEPARTMENT;
SELECT DEPTNO, MIN(HIREDATE) FROM T_PROFESSOR GROUP BY DEPTNO;
SELECT p.PROFNO "교수번호",p.NAME "교수이름",d.DNAME "학과명"
FROM T_PROFESSOR p JOIN T_DEPARTMENT d ON p.DEPTNO=d.DEPTNO
WHERE (p.DEPTNO,p.HIREDATE) IN
	(SELECT DEPTNO, MIN(HIREDATE) FROM T_PROFESSOR GROUP BY DEPTNO)
ORDER BY 1;






