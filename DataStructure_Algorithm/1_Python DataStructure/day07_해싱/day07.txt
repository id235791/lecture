이진트리의 순회방식
	순회란 트리에 존재하는 모든 데이터를 가져오는 방법을 의미한다
	구현시 재귀함수를 이용

	전위순회(깊이 우선 탐색/DFS)
		root -> left -> right

	중위순회(대칭순회)
		left -> root -> right

	후위순회
		left -> right -> root

해싱
	검색 알고리즘, 원하는 데이터를 찾아오는 방법
	메모리 낭비를 최소화 하기 위해서 저장할 값을 입력받을 시
	연산을 통해 특정한 규칙의 주소값을 생성하고,
	메모리에 저장(매핑,mapping)하는 기법이다
	예)
		들어온 정수값 -1 메모리에 저장하겠다
		(10 -> 9번지, 108684 -> 108683번지)

해시 테이블
	키들이 해싱을 통해 저장될 공간

해시 함수
	해싱기법을 사용해서 메모리에 매핑하기 위해 구현된 함수

해싱의 구조
	       연산	    저장
	데이터 -----> 해시함수 -----> 해시테이블

해싱 사용 이유

	1. 저장된 데이터를 연산시키고, 결과로 나온 주소값으로 직접
	접근하기 위해 사용, 즉 빠르게 저장된 위치에 접근하기 위해 사용

	2. 정수형 데이터 뿐만 아니라 다른 자료형의 데이터(문자열,...)
	또한 저장된 값을 가져올 때 빠르게 가져올 수 있기 때문에 사용

해시 함수 종류

	나눗셈법 : 입력된 값을 일정한 크기로 나눈 나머지를 주소로 이용하는 방법
	자리수 접기 : 숫자의 각 자리수를 더해 해시값으로 만드는 방법



나눗셈법과 자리수접기법의 문제점
	탐색시간도 빠르고, 메모리의 낭비가 줄어드나
	충돌현상과 클러스터 현상이 발생한다

	충돌 : 여러 값들이 동일한 주소에 매핑되는 현상
	클러스터 : 매핑되는 주소가 밀접해 있는 현상, 한곳에만 데이터가 몰려있는 현상

	개방주소법, 체이닝기법을 통해 해결한다.

개방주소법(Open Addressing)
	충돌 발생시 다른 주소값에 데이터를 삽입하는 방식
	선형탐색법, 제곱탐색법, ...
	
	선형탐색법 : 고정폭 이동, 1차 클러스터가 발생할 확률이 높다.
	제곱탐색법 : 이동폭이 제곱수로 늘어난다. 2차 클러스터가 발생한다
	이중해싱(중복해싱) : 해시함수를 두개 이용하는것, 해싱을 두번 거치는 것

체이닝(Chaining)
	각 해시값에 연결리스트를 할당하여 데이터 삽입시 충돌이 발생하면
	그 연결리스트에 데이터를 연결하여 삽입하는 방법이다.
	같은 해시값을 갖는 데이터가 계속 추가되면 한 리스트에만 데이터가
	추가되므로 해싱기법을 쓴 것이 무의미해진다.

####뛰어난 해싱기법과 체이닝을 적절하게 사용하여 메모리를 관리한다.####







