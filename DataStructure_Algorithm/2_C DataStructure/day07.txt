이진 탐색(Binary Search)
	데이터가 정렬되어 있다는 전제 하에 원하는 데이터를 찾는
	검색 알고리즘
	전체 묶음의 중간 데이터를 가져와서 찾는 값과 비교 후
	작다면 왼쪽 묶음의 중간값, 크다면 오른쪽 묶음의 중간값을 가져온다.
	위의 과정을 반복하여 원하는 데이터를 찾는다.

이진 탐색 트리
	이진탐색과 연결 트리를 결합한 자료구조의 일종
	효율적인 검색, 삽입, 삭제 등을 지원한다.

이진 트리의 순회방식
	순회란 트리에 존재하는 모든 데이터를 가져오는(확인하는) 방법을 의미한다.
	구현시 재귀함수를 이용

	전위순회(깊이 우선 탐색 / DFS)
		root -> left -> right
	중위순회(대칭순회)
		left -> root -> right
	후위순회
		left -> right -> root

해싱
	검색 알고리즘, 원하는 데이터를 쉽고 빠르게 찾는 방법
	저장할 값을 입력받을 시 연산을 통해 특정한 규칙의
	주소값을 생성하고 메모리에 저장하는 기법이다.

해싱 사용 이유
	1. 저장된 데이터를 연산하고 결과로 나온 주소값으로
	직접 접근하기 위해 사용, 즉 빠르게 저장된 위치에 접근하기 위해 사용

	2. 정수형 데이터 뿐만 아니라 다른 자료형의 데이터
	또한 저장된 값을 가져올 때 빠르게 가져올 수 있기 때문에 사용

해시 함수
	해싱기법을 이용해서 메모리에 매핑하기 위해 구현된 함수
	나눗셈법 이용

문제점
	탐색시간이 굉장히 빨라지지만 충돌현상과 클러스터 현상이 발생한다.
	충돌 : 여러 값들이 동일한 주소에 매핑되는 현상
	클러스터 : 매핑되는 주소가 밀접해 있는 현상, 한 곳에만 데이터가 몰려있는 현상











