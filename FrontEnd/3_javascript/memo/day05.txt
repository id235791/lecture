화살표 함수
	function 키워드를 사용하여 함수를 만드는 것보다 간단히 표현
	화살표 함수는 항상 익명 함수

	const 함수명 = (매개변수1, 매개변수2.. ) => 실행문;

	함수명(값1, 값2..);

	1. 이름만 있는 함수
		function func1() {
			console.log('안녕하세요!');
		}

		const func1 = () => console.log('안녕하세요');

	2. 매개변수가 있는 함수
		const func2 = x => console.log(`매개변수로 전달받은 값 : ${x}`);
		const func3 = (x, y) => console.log(`두수의 합 : ${x + y}`);

	3. 리턴값이 있는 함수
		const func4 = (x, y) => {
			let sum = 0;
			for(let i=x; i<=y; i++){
				sum += i;
			}
			return sum;
		}

함수 표현식
	const 함수명 = function(매개변수1, 매개변수2 ..){
		...
		return 리턴값;
	}

	* 자바스크립트는 함수를 변수에 저장할 수 있음
	* 자바스크립트는 script 태그를 만나면 자바스크립트를 읽고 선언!!된 함수를 먼저 메모리에 저장

호이스팅
	함수 안에 있는 선언문들을 모두 끌어올려서 해당 함수 유효 범위의 최상단에 선언
	자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 모두 모아서
	유효 범위의 최상단에 선언
	var 변수, 함수 선언식만 호이스팅이 일어남

변수의 범위(scope)
	자바스크립트에서는 객체, 함수가 모두 변수(상수)
	변수의 범위는 변수가 접근할 수 있는 변수, 객체, 함수의 집합

	1. 지역 변수
		함수 내에서 선언된 변수
		지역 변수는 변수가 선언된 함수 내에서 유효하고 함수가 종료되면 메모리에서 사라짐

		function func1(x, y){   // x, y, sum은 지역변수
			...
			let sum = 0;
		}

		console.log(x) // undefined


		if(조건식){
			let x = 0;  // 지역변수
			...
		}

		console.log(x) // undefined

	2. 전역 변수
		함수의 외부에서 선언된 변수
		전역 변수는 프로그램의 어느 영역에서나 접근할 수 있으며,
		웹 페이지가 닫혀야만 메모리에서 사라짐

		let global = 0;

		function func1(x, y){
			console.log(global);    // 사용가능
			...
		}

		console.log(global);    // 사용가능

객체(Object)
	실생활에서 인식할 수 있는 사물들을 객체
	여러 변수와 메소드들을 통합적으로 가지고 있는것
	변수 : 객체가 가져야할 속성, 성질, 데이터 저장
	메소드 : 객체가 해야할 행위, 기능 저장

클래스
	객체를 만드는 설계도
	찍어낼 객체의 변수와 메소드의 틀을 미리 정한것
	
	const 객체명 = {
		프로퍼티명: 값,
		...
	}

프로퍼티(property)
	객체내의 변수 또는 함수
	변수 -> 프로퍼티, 함수 -> 프로퍼티 메소드


객체의 선언
	1. 리터럴 표기법

	const 객체명 = {} // 빈 객체

	const 객체명 = {
		프로퍼티1:값1,
		프로퍼티2:값2,
		...
		메소드명:function(){
			...
		}
	}

	2. 생성자를 이용한 객체 생성
		new 연산자를 사용하여 객체를 생성하고 초기화 할 수 있음
		생성자는 메소드이며, 이 메소드는 새롭게 생성되는 객체를 초기화하는 역할을 함

	function 생성자명(매개변수1, 매개변수2 ..){
		프로퍼티명 = 값;
		...
	}

	const 객체명1 = new 생성자명(값1, 값2 ..);
	const 객체명2 = new 생성자명(값1, 값2 ..);
	..


	3. 클래스를 이용한 객체생성

	const 클래스명 = class {
		constructor(매개변수1, 매개변수2 ..){
			프로퍼티명 = 값;
			...
		}
		메소드명(매개변수1, 매개변수2..){

		}
		...
	}

	const 객체명 = new 클래스명(값1, 값2 ..);

this
	클래스, 또는 생성자는 한번의 선언으로 여러 객체를 생성하거나 다루어야 한다.
	따라서 내부적으로 생성되는 this라는 변수가 현재 생성중, 접근중인 객체를
	자동으로 받아오게 되고 그 안에 담긴것을 통해서 어떤 객체로 접근했는지를
	구별할 수 있게된다. 따라서 생성자나 클래스 내부의 메소드에서 this.필드명 으로
	접근하면 여러 객체도 하나의 메소드에서 구별하여 다룰 수 있게된다.
	this는 객체 구별용 변수