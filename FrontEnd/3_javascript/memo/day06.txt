프로토타입(prototype)
	자바스크립트의 모든 객체는 프로토타입이라는 객체를 포함
	모든 객체는 프로토타입으로 부터 프로퍼티와 메소드를 상속

	* 자바스크립트의 모든 객체는 최소한 하나 이상의 다른 객체로부터
	상속을 받으며 상속되는 정보를 제공하는 객체를 프로토타입이라고 함

	* 자바스크립트에 내장된 모든 생성자나 사용자 정의 생성자는
	Object.prototype과 자신의 생성자 객체를 프로토타입으로 가짐

	const mycar = new Car(); // Car.prototype

		<------------------ Object.prototype
	mycar	<------------------ Car.prototype


Math 객체
	수학에서 자주 사용하는 상수와 함수들을 미리 구현해 놓은 자바스크립트 내장 객체

	min() : 최소값을 반환, 매개변수가 전달되지 않으면 Infinity를 반환,
	비교할 수 없는 값이 포함되어 있으면 NaN을 반환

	max() : 최대값을 반환, 매개변수가 전달되지 않으면 -Infinity를 반환,
	비교할 수 없는 값이 포함되어 있으면 NaN을 반환

	round() : 소수점 첫번째 자리에서 반올림하여 반환

	floor() : 소수점 첫번째 자리에서 내림

	ceil() : 소수점 첫번째 자리에서 올림

	random() : 0보다 크거나 같고 1보다 작은 무작위 소수를 반환

String 객체
	문자열을 쉽게 만들고 다룰 수 있게 함

	const str = '자바스크립트';
	const str = new String('자바스크립트');

	length : 문자열의 길이를 저장

	indexOf() : 매개변수로 전달된 문자열이 처음 등장하는 위치를 반환

	charAt() : 매개변수로 전달된 인덱스에 위치한 문자를 반환

	includes() : 매개변수로 전달된 문자열이 포함되어 있는지 여부를 반환

	substring() : 매개변수로 전달된 시작 인덱스부터 종료 인덱스 바로 앞까지
	문자열을 추출하여 반환
	매개변수가 1개인 경우 -> 해당 인덱스부터 끝까지 문자열을 추출

	substr() : 매개변수로 전달된 시작 인덱스부터 전달된 개수만큼
	문자열을 추출하여 반환

	split() : 매개변수로 전달된 구분자를 기준으로 문자열을 나눈 후 하나의 배열에 저장

	replace() : 원본 문자열을 매개변수로 전달된 문자열로 치환

	trim() : 문자열의 앞뒤 공백을 제거

GitHub Pages
- 깃허브 페이지를 이용하여 웹페이지를 서비스


과제 : 주민등록번호를 입력받아 유효성 체크하는 프로그램을 작성

주민등록번호를 입력하세요. 0010113068518

1. 각자리에 2,3,4,5,6,7,8,9,2,3,4,5를 곱해줌. 단 마지막 자리는 빼놓음

0 0 1 0 1 1 3 0 6 8 5 1     <<8>>
* * * * * * * * * * * *
2 3 4 5 6 7 8 9 2 3 4 5

0 0 4 0 6 7 24 0 12 24 20 5

2. 각자리의 숫자를 모두 더함
0 + 0 + 4 + 0 + 6 + 7 + 24 + 0 + 12 + 24 + 20 + 5 = 102

3. 11로 나눈 나머지 값을 구함
    102 % 11 = 3

4. 11에서 결과값을 뺌(단, 마지막 결과가 두자리인 경우 다시 10으로 나눈 나머지 값을 구함)
    11 - 3 = 8
    만약 11 - 1 = 10 -> 10 % 10 = 0

5. 결과가 주민등록번호 마지막 자리와 일치하면 유효한 주민등록번호임

Date 객체
	날짜, 시간등을 쉽게 다룰 수 있는 내장객체

	const 객체명 = new Date();  // 현재 날짜 시간을 가진 객체가 만들어짐

연도(year)
	2자리로 표현 : 1900 ~ 1999
	const date = new Date(21, 6, 20);   // 1921년 7월 20일

	4자리로 표현 : 2000 ~
	const date = new Date(2021, 6, 20); // 2021년 7월 20일

월(month)
범위 0 ~ 11(1월 ~ 12월)
    const date = new Date(2021, 5, 20); // 2021년 6월 20일

일(day), 시(hour), 분(minute), 초(seconds)

Date객체를 만드는 방법
	1. new Date() : 현재 날짜 시간을 저장하는 객체가 만들어짐(브라우저 기준)
	2. new Date("날짜 문자열") : 해당 날짜 시간을 가리키는 객체가 만들어짐
	ex)new Date("2021-05-20");
	3. new Date("Timestamp 밀리초") : 1970년 1월 1일 0시 ~ 해당 밀리초만큼
	지난 시간의 날짜 객체가 만들어짐
	4. new Date(년, 월, 일, 시, 분, 초, 밀리초) : 해당 특정 날짜 시간을 가리키는
	객체가 만들어짐

window 객체
	현재 웹브라우저의 창이나 탭을 표현하기 위한 객체
	비표준 객체

	setTimeout() : 일정 시간이 지난 후 매개변수로 제공된 함수를 실행

		function 함수명(){
			....
		}
		const 상수명 = setTimeout(함수명, 시간);  

	clearTimeout() : setTimeout()에서 실행된 함수를 취소
	
		clearTimeout(setTimeout의 이름);

	setInterval() : 일정 시간마다 매개변수로 제공된 함수를 실행

		function 함수명(){
			....
		}

		const 상수명 = setInterval(함수명, 시간);  


	clearInterval() : setInterval()에서 실행된 함수를 취소

		clearInterval(setInterval의 이름);

문제.   시계 프로그램을 작성

    현재시간 :  16:40:00 

콜백함수(Callback Function)
	파라미터로 함수를 전달받아 함수의 내부에서 실행하는 함수

	const num = [1, 2, 3, 4, 5];

	num.forEach(x => {
		console.log(x * 10);
	});

	출력결과
	10
	20
	30
	40
	50

	num.forEach(function(x) {
		console.log(x * 10);
	});


콜백지옥! 이크마6부터 -> 프로미스 에이씽크 어웨이트

function add(x, callback){
    let sum = x + x;
    console.log(sum);
    callback(sum);
}

add(10, function(result) {
    add(result, function(result){
        add(result, function(result){
            ...

        })
    })
});


문서 객체 모델(Document Object Model)
	xml이나 html문서에 접근하기 위한 일종의 인터페이스
	문서내에 모든 요소를 정의하고 요소에 접근하는 방법을 제공

<html lang="en">
<head>
	<title>초간단 문서</title>
</head>
<body>
	<h2>초간단 문서</h2>
	<p>간단한 문서</p>
</body>
</html>

			document 객체

			<html> - lang
                                
		<head>			<body>
		<title>		<h2>		<p>     
		초간단 문서	초간단 문서	간단한 문서

document 객체
	웹 페이지 자체를 의미
	웹 페이지에 존재하는 HTML 요소에 접근할 때는 반드시 document 객체로부터 시작

	메소드
	document.getElementsByTagName() : 해당 태그 이름의 요소를 모두 선택
	const tag = document.getElementsByTagName('h2');

	document.getElementById() : 해당 아이디의 요소를 선택

	document.getElementsByClassName() : 해당 클래스에 속한 요소를 모두 선택

	document.getElementsByName() : 해당 name 속성값을 가지는 요소를 모두 선택

	querySelectorAll() : 해당 선택자로 선택되는 요소를 모두 선택
	const sel = document.querySelectorAll('div > p');

