접근 권한 제어자
	다른 패키지나 혹은 다른 클래스에서 해당 필드에 접근할 수 있는
	권한(범위)를 제어해주는, 설정해주는 키워드들

	(default)	: 아무 키워드도 붙이지 않은 경우, 같은 패키지에서만 접근 가능
	public		: 모든 곳에서 접근 가능
	private		: 다른 클래스, 다른 패키지에서 접근 불가
	protected	: 같은 패키지에서만 접근 가능, 자식에서는 자신의 필드처럼 접근 가능

	public
		모든 곳에서 자유롭게 접근이 가능해야 하는 필드들
		(데이터를 처리하고 기능을 담당하는 메소드들)

	private
		자신만 이용할 경우나 데이터를 담는 변수들
		(게시글 제목, 회원의 계좌번호, 학생의 이름, ...)

	protected
		상속이 목적
		(자식 클래스들이 사용 가능하고자 할때, 자식 클래스들에서 오버라이딩을 해서 쓸 때)

	(default)
		확실하게 같은 패키지에서만 이용할 때, 귀찮을 때

	private 필드는 직접 접근할 방법이 하나도 없기 때문에 무조건
	public 메소드를 통해서 간접적으로 접근한다.
	(값을 사용해야 하는 경우 : getter / 값을 수정하는 경우 : setter)
	protected 필드는 직접 선언하는 경우보다, 선언되어 있는것을 사용하는 경우가 많다.
	사용하고 싶다면 내 클래스에 상속시켜주고 내 필드처럼 사용해야 한다.

추상 클래스(불완전한 클래스)
	추상적인 내용만 정의하고 있는 클래스로, 구체적인 내용이 존재하지 않을 수도 있는 클래스
	상속받은 하위 클래스에서 그 내용들을 구현하도록 설계된 클래스이다.
	추상 클래스(부모)는 클래스들(자식)의 공통 요소들을 추상적으로 가상화 시켜놓기 때문에
	객체화시 자식에서 재정의를 통한 구현을 하고, 그 자식타입으로 객체화를 진행해서 사용한다.
	부모 추상 클래스의 역할은 단지 자식 클래스들을 만들 때 틀로 존재해서 도와주는 역할을 수행한다.
	그렇기 때문에 자식 클래스에서 재정의 해야하는 메소드의 이름과 형태만 가지고 있다.
	즉, 메소드에 바디( {} )가 없다. 이러한 메소드를 추상 메소드라고 하며, abstract 라는
	키워드가 리턴타입 앞에 붙는다. 추상 메소드가 하나라도 포함되어 있다면 그 클래스는
	추상 클래스로 선언해야 한다.

추상 클래스 선언
	
	abstract class 추상클래스명{
		필드 선언
		abstract 리턴타입 메소드명();
	}
	추상 메소드는 자식 클래스에서 강제적으로 반드시 재정의 해야한다.
	일반 메소드도 추상 클래스 내부에 존재할 수 있다.

인터페이스(interface)
	추상 클래스를 고도화시킨 문법이며, 반드시 추상 메소드와 상수만 선언해야 한다.
	다른 클래스에서 인터페이스를 상속받을 때에는 implements 라는 키워드를 사용한다.
	상속받은 클래스는 인터페이스가 가지고 있는 추상 메소드를 반드시 재정의 해야한다.





