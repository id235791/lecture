모델링
	추상적인 주제를 DB에 맞게 설계하는 것

	예 : 영화관
	1. 요구 분석
		무언가 개발하기 위해 필요한 데이터들, 처리해야 할 데이터들이 어떤것들이 있는지
		상영관에 대한 정보(위치,번호,좌석수,...), 영화에 대한 정보(감독,배우,런닝타임,...)
		위치,번호,좌석수,감독,배우,런닝타임,..

	2. 개념적 설계(개념 모델링)

		영화		시간표		상영관

		감독		위치		위치
		배우		번호		번호
		런닝타임		좌석수		좌석수
		제목		제목
				감독
				런닝타임

	3. 논리적 설계(논리 모델링)

		영화		시간표		상영관

		영화코드(PK)	인덱스(PK)	상영관코드(PK)
		감독(NN)		상영관코드(FK)	위치
		배우		영화코드(FK)	번호
		런닝타임				좌석수
		제목		

	4. 물리적 설계(물리 모델링)
		영화코드 : varchar(300),
		감독 : varchar(300),
		...

	5. 구현

정규화
	삽입, 수정, 삭제의 이상현상을 제거하기 위함
	데이터 중복을 최소화 하기 위함
	테이블을 나누어가는 과정
	대부분 3차 정규화까지 진행

	아이디	이름	전공	수업코드	수업명		최대인원
	apple	김사과	전자과	C001	너무쉬운자바	30
	apple	김사과	컴공과	C002	너무쉬운DBMS	30	<- 수정이상
	banana	반하나	수학과	C002	너무쉬운DBMS	30	<- 삭제이상
	xxxx	xxxx	xxxx	C003	너무쉬운HTML	35	<- 삽입이상

1차 정규화
	하나의 컬럼에 값이 한개씩만 있어야 한다

	apple	김사과	바지1, 바지2, 코트

	apple	김사과	바지1	1000
	apple	김사과	바지2	1500
	apple	김사과	코트	4000

2차 정규화
	각 테이블들의 모든 컬럼들이 서로 관계가 있어야 한다

	apple	김사과	바지1	1000
	apple	김사과	바지2	1500
	apple	김사과	코트	4000

	apple	김사과		바지1	1000
				바지2	1500
				코트	4000

3차 정규화
	하나의 컬럼은 그 외 다른 컬럼을 결정하면 안된다

	이름	시	구	동	우편번호
	--------------------------------------
	김사과	서울	강남	역삼	12345
	반하나	서울	강남	대치	12358
	이체리	서울	동작	사당	12019
	

	우편번호	시	구	동
	--------------------------
	12345	서울	강남	역삼
	12358	서울	강남	대치
	12019	서울	동작	사당

	이름	우편번호
	--------------
	김사과	12345
	반하나	12358
	이체리	12019
	차두리	12345

반정규화
	활용하는 쪽에서 데이터를 관리, 사용하기에 더 편하다면
	반대로 정규화를 진행하지 않는 방법

	M01	서울의 봄		정우성,황정민,이성민,김성균

	M01	서울의 봄		정우성	10	남자
	M01	서울의 봄		황정민	15	남자
	M01	서울의 봄		이성민	20	남자
	M01	서울의 봄		김성균	25	남자


	M01	서울의봄		A01	정우성	10	남자
				A02	황정민	15	남자
				A03	이성민	20	남자
				A04	김성균	25	남자

	M01	A01
	M01	A02
	M01	A03
	M01	A04

DML
	Data Manipulation Language - 데이터 조작어
	실질적으로 데이터들을 CRUD하는 언어

	데이터 추가
		insert into 테이블명 [(컬럼명1, 컬럼명2, ...)]
		values(값1, 값2, ...);

	데이터 삭제
		delete from 테이블명 [where 조건식];

	데이터 수정
		update 테이블명
		set 기존컬럼명=바꿀값, 기존컬럼명=바꿀값, ...
		[where 조건식];

	데이터 조회
		select 컬럼명1, 컬럼명2, ... from 테이블명 [where 조건식];

where 조건절
	행(데이터)에 대한 조건식을 써주는 조건절
	행을 찾기 위한 조건절

	=	: 같다
	!=, <>	: 다르다
	and	: 두 조건식이 모두 참이면 참
	or	: 두 조건식 중 하나라도 참이면 참

NULL 값 비교
	NULL값은 = 이나 != 으로 비교하는 것이 아니고
	is, is not으로 비교한다.

	where strdata = null		(X)
	where strdata is null		(O)

	where strdata != null		(X)
	where strdata is not null	(O)












