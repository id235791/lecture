스프링 MVC 프로젝트의 기본 구성
	스프링 MVC 에서 어떤 단계를 거쳐서 실행되는지 이해해야
	문제 발생 시 빠른 대처와 대안을 찾을 수 있다.
	웹 프로젝트는 3-tier(티어) 방식으로 구성한다.

	Data <-> Application <-> Presentation

Data Tier(데이터 계층)
	데이터를 보관하고 사용하는 방법에 대해 설계가 들어가는 계층
	영속 계층, 백엔드 라고도 부른다.
	데이터베이스와 데이터베이스에 접근하여 데이터를 읽고 쓰는것을 관리하는 방법들이 포함되어 있다.
	일반적으로는 DB를 많이 이용하지만, 상황에 따라서는 네트워크 호출, 원격 호출 등의 기술이 접목된다.
	DB 서버가 담당하는 영역

Application Tier(어플리케이션 계층)
	요청되는 정보를 처리하고 가공하는 계층
	미들웨어, 백엔드 라고도 부른다.
	비즈니스 로직 계층 이라고도 하며 동적인 데이터들을 제공하기 위한
	순수한 비즈니스 로직이 포함되어 있다.
	JAVA를 포함한 WAS 서버가 담당하는 영역

Presentation Tier(화면 계층)
	사용자와 직접적으로 소통하는 계층
	프론트엔드 라고도 부른다.
	사용자의 응답 처리를 진행하고, 화면을 표현하는 방법들이 포함되어 있다.
	HTML 엔진(Thymeleaf), 웹 서버가 담당하는 영역

[결론]
	각 영역은 독립적으로 설계되어 나중에 특정한 기술이 변하더라도 필요한 부분을
	전자제품의 부품처럼 쉽게 교환할 수 있게 하자는 방식이다. 각 계층의 연결 부위는
	인터페이스를 이용하여 설계하는 것이 일반적인 구성 방식이다.

프로젝트 생성
	Developer Tools
		Spring Boot Devtools(서버 자동 재시작)
		Lombok(편리한 DTO 구성)

	Messaging
		WebSocket(채팅을 위한 웹 소켓)

	SQL
		MyBatis Framework
		MySQL Driver

	Template Engines
		Thymeleaf(JSP 대신 사용할 템플릿 엔진 - SSR)

	Web
		Spring Web(RESTful, Spring MVC, 내장 톰캣, ..)

명명 규칙(Naming Convention)
	패키지명 : 최상위도메인명.그룹명.프로젝트명
		ex) com.example.demo

	요소별 명명
		config		프로젝트와 관련된 설정 클래스들의 보관 패키지
		controller	스프링 MVC의 Controller들의 보관 패키지
		service		스프링의 Service 인터페이스와 구현 클래스 패키지
		domain		DTO들의 보관 패키지
		model		DAO, DTO 클래스들의 패키지
		mapper		MyBatis의 Mapper 인터페이스들의 패키지
		repository	레포지토리 패턴 이용 시 레포지토리들의 패키지
		exception	웹 관련 예외 처리 클래스들의 보관 패키지
		aop		스프링의 aop 관련 패키지
		security	Spring Security 관련 패키지
		util		각종 유틸리티 클래스 관련 패키지











