스프링 부트

[학습 목표]
	스프링 부트를 이용해서 '의존성 주입'을 하는 것에 대한 이해와 테스트
	스프링의 JUnit 테스트 환경 구축
	스프링 MVC 모델에 대한 이해와 구현

프레임 워크
	뼈대나 근간을 이루는 코드들의 묶음
	개발자는 각 개개인의 능력 차이가 큰 직종이고, 개발자 구성에 따라
	프로젝트 결과 역시 큰 차이를 낳는다. 이런 상황을 극복하기 위한
	코드의 결과물이 바로 프레임 워크이다. 프로그램의 기본 흐름이나
	구조를 정해놓고 모든 팀원들이 이 구조에 자신의 코드를 추가하는
	방식으로 개발하게 된다.

프레임 워크의 장점
	개발에 필요한 구조를 이미 코드로 만들어 놓았기 때문에, 실력이 부족한
	개발자라 하더라도 반 쯤 완성된 상태에서 필요한 부분을 조립하는 형태의
	개발이 가능하다. 회사 입장에서는 프레임워크를 사용하면 일정한 품질이
	보장되는 결과물을 얻을 수 있고, 개발자 입장에서는 완성된 구조에
	자신이 맡은 코드를 개발해서 넣기 때문에 비즈니스 로직에만 집중할 수 있고
	개발 시간을 단축할 수 있다.

스프링 프레임워크
	경량 프레임워크(light-weight)
	예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록
	만들다 보니 하나의 기능을 위해서 너무 많은 구조가 필요했다. 기술이 너무나
	복잡하고 방대했기 때문에 전체를 이해하고 개발하기에는 어려움이 많았다.
	그래서 스프링 프레임워크가 등장했고, 특정 기능을 위주로 간단한 JAR파일 등을
	이용해서 모든 개발이 가능하도록 구성되어 있다.

스프링 프레임워크(Spring Framework) VS 스프링 부트(Spring Boot)
	스프링 프레임워크
		설정 파일을 개발자가 직접 작성하여 스프링 컨테이너를 구성
		필요한 빈 객체를 직접 등록, 의존성을 설정
		스프링 프레임워크를 보다 세밀하게 제어하고자 하는 경우에 사용
	----------------------------------------------------------
	스프링 부트
		스프링에서 제공하는 여러 기능들을 자동으로 설정하여 보다 쉽게 사용할 수 있음
		모니터링과 관리를 위한 기능을 제공하여 상태 모니터링 및 조치를 취하기 쉬움
		내장 톰캣 서버를 사용하여 쉽게 웹 어플리케이션을 실행할 수 있음
		개발자가 더더욱 개발에만 집중할 수 있도록 도와주는 프레임워크
	결론
		스프링은 프레임워크이며, 스프링 부트는 스프링 프레임워크를 기반으로 한 도구
		스프링 프레임워크를 세밀하게 제어하고 싶다 - 스프링 프레임워크
		빠르고 간단하게 스프링 어플리케이션을 개발하고 싶다 - 스프링 부트

스프링의 특징
	POJO 기반의 구성
	의존성 주입(DI)을 통한 객체 간의 관계 구성
	AOP 지원
	편리한 MVC 구조
	WAS에 종속적이지 않은 개발 환경

POJO(Plain Old Java Object) 기반의 구성
	오래된 방식의 간단한 자바 객체
	JAVA 코드에서 일반적으로 객체를 구성하는 방식을 스프링에서도 그대로 사용할 수 있다
	스프링 프레임워크에 종속되지 않은 객체를 생성할 수 있다.

스프링 빈(Spring Bean)
	스프링 컨테이너에 의해 관리되는 재사용 가능한 소프트웨어 컴포넌트
	스프링 컨테이너가 관리하는 자바 객체

	스프링 빈(스프링에 등록된 객체) ---> 빈(만들어져서 사용할 수 있는 객체)
			     (인스턴트화)

의존성(Dependency)
	객체간의 협력성
	객체가 활동하기 위해 다른 객체를 참조하는 것
		ex) 메소드의 파라미터, 전역변수로 다른 타입의 객체가 선언된 경우
	하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것을 의미
		ex) A 객체가 B 객체 없이 동작이 불가능한 상황 - 'A가 B에 의존적이다'
	컴파일타임 의존성(클래스 사이의 의존성, 클래스를 선언하며 의존성이 결정) - 높음
	런타임 의존성(객체 사이의 의존성, 코드를 실행해 보았을 때 의존성이 결정) - 낮음

IOC(Inversion Of Control)
	제어의 역전
	객체의 생성, 설정, 초기화 등 을 개발자가 직접 관리하는 것이 아닌 외부에 맡기는 형태
	객체의 생명 주기를 모두 프레임워크에 위임하는 설계 원칙
	개발자는 프레임워크에게 요청을 한 후 생성하고자 하는 것을 받아서 사용
	IOC 원칙을 실현한 디자인 패턴 중 하나가 DI(Dependency Injection)
	
	*의존하는 형태의 설계
	ⓐ<-------------------ⓑ
	a 객체에서 b 객체를 직접 생성

	*제어의 역전 형태의 설계
	ⓐ<-----> ???? <------ⓑ
	a는 b가 필요하다 라는 신호를 보내고, b 객체를 주입하는 것은 외부에서 이루어짐

	주입(Injection)을 말 그대로 외부에서 밀어 넣는것을 의미한다. 어떤 객체가
	필요로 하는 객체를 외부에서 밀어 넣어주는것을 의미한다. 주입을 받는 입장에서는
	어떤 객체인지 신경 쓸 필요가 없고 어떤 객체에 의존하든 자신이 하던 역할은
	변하지 않게 된다.

	의존성 주입방식을 이용하기 위해서는 ????라는 존재가 필요하게 된다.
	스프링 프레임워크에서는 ApplicationContext 가 ???라는 존재이며
	필요한 객체를 생성하고 주입까지 해주는 역할을 한다. 따라서 개발자들은
	기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고, 이러한 객체들을
	엮는(Wiring) 작업의 형태로 개발하게 된다.

STS(Spring Tool Suite) 설치
	https://spring.io/tools > jar 파일 다운로드 및 압축 해제
	> 내부의 contents.zip 압축 해제

Maven
	Maven은 프로젝트 관리 도구의 일종이다. Maven은 필요한 라이브러리를
	특정 문서(pom.xml)에 정의해 놓으면 내가 사용할 라이브러리 뿐만 아니라
	해당 라이브러리가 작동하는데에 필요한 다른 라이브러리들 까지 관리하여
	네트워크를 통해서 자동으로 다운받아준다.
	과거에는 Ant, 최근에는 Gradle 이라는 빌드 도구 사용

	https://mvnrepository.com/

프로젝트 생성
	Spring Starter Project > 프로젝트 설정(Dependencies)

	Developer Tools
		Spring Boot Devtools(서버 자동 재시작)
		Lombok(편리한 DTO 구성)
	Messaging
		WebSocket(채팅을 위한 웹소켓)
	SQL
		MyBatis Framework
		MySQL Driver
	Template Engines
		Thymeleaf(JSP 대신 사용할 템플릿엔진 - 서버사이드 렌더링)
	Web
		Spring Web(RESTful, Spring MVC, 내장 톰캣)
		Spring Session
	
프로젝트 기본 구성 요소
	src/main/java		작성되는 코드들의 경로
	src/main/resources	서버, 클라이언트 사이드 자원들의 경로
	src/test/java		테스트 코드들을 넣는 경로

스프링 부트 라이브러리 세부 설정 파일
	src/main/resources/application.properties

템플릿 프로젝트의 HTML 파일 경로
	src/main/resources/templates

css, js, 미디어 파일 등 클라이언트 리소스 경로
	src/main/resources/static

Maven이 사용하는 pom.xml
	최상위경로/pom.xml

Lombok 설치
	https://projectlombok.org > Download > Download 1.18.32 클릭
	> 다운받은 .jar파일 실행
		아이콘이 커피잔 모양 : 더블클릭
		아이콘이 압축파일 모양 : cmd 실행 > java -jar lombok.jar파일경로 > 엔터
	> 경고메세지 무시 > Specify location 클릭 후 STS 경로 찾기
	> Install/Update 클릭 > 끝






