의존성 주입 테스트
	호텔, 레스토랑 객체 안에 셰프 객체를 주입하는 예제
	생성자, setter 메소드를 이용한 주입으로 의존성 주입 구현
	어노테이션을 통해 주입 처리

스프링이 동작시 생기는 일
	스프링이 시작되면서 먼저 스프링이 사용하는 메모리 영역을 만든다.
	스프링 내부적으로 필요한 부분들(내장서버, ApplicationContext 등)이 만들어진다.
	스프링은 자신이 생성하고 관리해야 하는 객체들을 알아야 하고
	@Component 어노테이션을 참고하여 인스턴스를 생성한다.
	Restaurant 객체는 Chef 객체가 필요하다는 어노테이션(@Autowired) 설정이 있으므로
	등록되어 있는 Chef 객체의 레퍼런스를 Restaurant 객체에 주입한다.

테스트 환경(JUnit)
	자바 프로그래밍 언어용 유닛 테스트 프레임워크
	가장 많이 사용되는 테스트 환경
	테스트 성공시 JUnit GUI 창에 녹색 / 적색으로 표시
	하나하나의 케이스별로(단위로 나누어서) 테스트를 하는 단위 테스트 도구

테스트 환경 구축하기
	1. 테스트 클래스 위쪽에 어노테이션 추가
		@SpringBootTest
	2. 내부에 테스트용 메소드 선언
		내용은 우리가 테스트 해볼 로직으로 구현
		위쪽에 @Test 작성
	3. 해당 클래스 JUnit Test로 실행

Spring MyBatis
	SQL이 짧고 간결한 경우에는 어노테이션을 이용해서 쿼리문을 작성해준다.
	SQL이 복잡하거나 길어지는 경우에는 어노테이션보다 XML을 이용하는 것이 좋다.
	Mapper 인터페이스 위에는 @Mapper 를 작성해준다.

	Spring-MyBatis의 경우 Mapper 인터페이스와 XML을 연동해서 동시에
	이용할 수 있다. mapper인터페이스객체.메소드() 를 호출하는 순간
	해당하는 인터페이스의 	경로를 namespace로 가지고 있는
	mapper XML 파일로 찾아가서 메소드명과 동일한 id를 가지고 있는
	쿼리문을 수행하고 결과로 돌려준다.

	MyBatis 관련 테스트는 스프링 전체 구동이 필요하지 않기 때문에
	@MybatisTest
	@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
	두 가지의 어노테이션을 작성해준다.

스프링 부트의 구동 순서
	프로젝트 구동은 ~~Application.java 에서 시작한다.
	클래스 상단에는 @SpringBootApplication 어노테이션이 등록되어 있다.
	해당 프로젝트를 실행하면 application.properties 를 참고한 후
	내부적으로 필요한 서버와 빈 들이 생성된 후 작동한다.
	그 중에 DispatcherServlet 이라는 서블릿이 있으며 MVC 구조에서
	가장 핵심적인 역할을 하는 클래스이고, 내부적으로 앱 관련 처리의 준비 작업을 진행한다.
	DispatcherServlet은 프론트 컨트롤러의 역할이며 이 서블릿이 구동되는 과정에서
	등록된 객체(SpringBean)들은 주입 될 객체(Bean)들과 같이 연동하게 된다.

Front-Controller 패턴
				HandlerMapping
				 ↑	    ↓
	Client -> DispatcherServlet   ←   HandlerAdapter ↔ Controller ↔ Service
	    ↑			 ↓
	    └─────── View ← ViewResolver

	1. 사용자의 Request는 Front-Controller인 DispatcherServlet을 통해 처리한다.
	2. HandlerMapping은 Request의 처리를 담당할 컨트롤러를 찾기 위해 존재한다.
	3. HandlerMapping 인터페이스를 구현한 여러 객체 중 @RequestMapping 이라는
	어노테이션이 적용된 것을 기준으로 판단하며, 적절한 컨트롤러를 찾았다면 HandlerAdapter를
	이용해서 해당 컨트롤러를 작동시킨다.
	4. Controller의 처리가 완료되었다면 어디로, 어떻게 갈 것인지 라는 결과가 나오고
	그 결과를 ViewResolver가 받아서 어떻게 View를 처리할지 해석을 한다.
	5. 해석된 결과를 가지고 실제 응답을 보내야 하는 데이터를 생성해준다.
	6. 만들어진 응답(데이터, 페이지)을 DispatcherServlet을 통해서 응답해준다.

스프링 MVC Controller의 특징
	HttpServletRequest, HttpServletResponse를 거의 사용할 필요 없이 구현
	다양한 타입의 파라미터 처리, 다양한 타입의 리턴 타입 사용 가능
	GET방식, POST방식 등 전송 방식에 대한 처리를 어노테이션으로 처리 가능
	ex) GET:/user/join - join페이지로 이동 / POST:/user/join - 회원가입 처리
	상속/인터페이스 방식 대신 어노테이션으로 간단하게 매핑 처리 가능

Postman(포스트맨)
	https://www.postman.com > 다운로드 버튼 클릭 > 설치파일 실행 > 계정 로그인

	여러 방식의 요청을 외부에서 보낼 수 있도록 도와주는 개발 툴
	GET, POST 외에도 PUT, DELETE 등의 요청도 가능하다.












