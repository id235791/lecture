React
	메타(Facebook)에서 개발한 오픈 소스 자바스크립트 라이브러리
	자체적으로 DOM을 활용하여 변화된 부분만 리렌더링을 하여 페이지에 변화를 줌
	리렌더링이 잦은 동적인 화면을 구현 시 효율이 좋음
	모듈형 개발을 통해 생산성 향상
	SPA(Single Page Application)

	React - CSR(Client Side Rendering)
	Thymeleaf, JSP - SSR(Server Side Rendering)

React를 이용한 프론트 개발

		요청		  내부에서 ajax 통신
	사용자	->	React(프론트) 서버	->	Spring Boot(백) 서버
		<-			<-
		렌더링		    결과 데이터 반환

Node.js
	Javascript를 웹 브라우저 밖에서 사용 가능하게 해주는 런타임 환경
	Javascript를 이용하여 서버 구축 가능(백엔드 개발 가능)
	npm 패키지 관리자를 이용한 편한 라이브러리 설치

	https://nodejs.org > 안정성을 위한 Long Term Support 버전 설치

리액트(cra) 설치
	터미널 열어서
	npm i -g create-react-app

터미널 명령어
	cd(change directory) : 경로 이동
	npx create-react-app 프로젝트명 : 리액트 프로젝트 생성
	npm start : node 프로젝트 실행

JSX
	Javascript 기반의 확장된 표현식 문법
	렌더링을 위한 HTML 태그 형태 사용 가능
	렌더링을 위한 Javascript 값 표현식 사용 가능
	JSX는 컴파일 후 Javascript의 객체로 인식
	속성 정의시 Javascript의 DOM 객체의 프로퍼티로 작성
	단일 태그여도 마지막에 닫는 태그 필수 (<br></br>, <br/>)
	ex)
		const url = "https://www.naver.com"
		const el = <a href={url} className="link">네이버로 이동</a>
		
	만들어지는 하나하나를 React Element라 부름

리액트 프로젝트의 실행 순서
	1. npm start 명령으로 node 프로젝트가 컴파일 되며 src/index.js를 찾아서 실행
	2. index.js 에 있는 내용을 수행하며 해당 내용을 index.html에 적용시킴
	3. ReactDOM 의 render()를 통해 내부 내용이 렌더링

컴포넌트
	리액트로 만들어진 페이지를 위한 최소한의 단위
	리액트 페이지 모듈화의 시작
	컴포넌트의 각 상태는 state라 부름
	컴포넌트는 상태가 변화될 시 자동으로 리렌더링을 수행

useState()
	const [변수명, setter명] = useState(초기값);
	컴포넌트의 상태를 관리하는 훅
	setter를 이용해서 상태의 값을 변화시킬 시 컴포넌트의 리렌더링이 일어남









