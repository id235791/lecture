Info > Join

컨테이너-프레젠터(Container-Presenter) 패턴
	컴포넌트에 필요한 핸들러들을 컴포넌트 생성을 위한 js, jsx에 모두 넣으면
	코드가 길어지고 가독성이 안좋게 된다. 또한, 한 페이지를 구현하기 위해서는
	여러 컴포넌트가 필요하다. 따라서 해당 페이지를 구현하기 위한 프레젠터는
	리액트 엘리먼트만 리턴을 하고, 그런 여러 프레젠터와 핸들러들, 그 외의
	js 함수들은 컨테이너에서 선언 및 콜백 함수로 호출을 한다.
	데이터 처리와 화면 출력을 서로 나누어서 선언하여 관리하는 패턴이다.

	ex) 패턴이 적용되지 않은 예(Main.jsx)
	const Main = () => {
		const handler = () => {
			...
		}
		...
		return (
			<div id="wrap">
				...
			</div>
		)
	}

	ex) 패턴이 적용된 예(Main.jsx)
	const MainContainer = () => {
		const handler = () => {
			...
		}
		...
		return <Main></Main>
	}

	const Main = ()=>{
		return (
			<div id="wrap">
				...
			</div>
		)
	}

useRef()
	const 변수명 = useRef(초기값);
	1. 컴포넌트의 DOM 요소에 직접 접근하여 포커스 설정, 텍스트 선택, 미디어 재생 등을 제어할 때
	2. 리렌더링 사이에 특정 값을 저장하고, 그 값의 변경이 또 새로운 리렌더링을 불러오지 않도록 할 때

	해당 ref의 값을 사용하기 위해서는 변수명.current 로 접근

useEffect()
	useEffect(콜백함수,[종속성,...])

	컴포넌트의 effect(부가효과)를 설정할 수 있는 훅
	렌더링 시 콜백함수를 호출하나 두 번째 매개변수 배열에 포함된 종속성들의 변화가 없다면,
	콜백함수를 호출하지 않음
	종속성 배열이 아예 없는 경우는 리렌더링 때마다 콜백함수 호출
	빈 배열인 경우 처음 한 번만 호출
	
Join 예제
	1. 렌더링 준비
		렌더링 되며 ref 설정(inputRef)

	2. 렌더링 하며 input 태그들에 써져있는 ref 속성 처리
		addInputRef() 함수를 호출하며 inputRef.current에 각 input 태그들 추가

	3. state 처리
		렌더링 이후 state 설정(list, inputs)

	4. 렌더링이 완료되었으면 useEffect() 확인
		-초기 렌더링, list 변화가 있을 시 콜백함수 호출
		-아닌 경우에는 스킵

	5. <input> 태그에 무언가를 입력할 시 inputs state에 변화가 일어나며 리렌더링
		{id, pw, name} 값이 변화되며 <input>들의 value 속성값이 변화되므로
		무언가를 입력할 때마다 새로운 값으로 렌더링을 하고 있다는 뜻
		하지만 list state는 변화가 없으므로 effect는 수행되지 않음

	6. 가입 버튼을 누르면 list 배열에 입력한 객체를 추가
		새로운 객체가 추가되며 list state에 변화가 생겼으므로 리렌더링을 하고
		이 때 list 배열은 effect의 종속성으로 선언되어 있기 때문에 effect 수행








